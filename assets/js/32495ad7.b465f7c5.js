"use strict";(self.webpackChunksiglens_docs=self.webpackChunksiglens_docs||[]).push([[641],{2993:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var s=t(5893),r=t(1151);const i={},o="Javascript App",a={id:"instrument-traces/js-app",title:"Javascript App",description:"Auto-instrument sample Javascript app for traces",source:"@site/docs/instrument-traces/js-app.md",sourceDirName:"instrument-traces",slug:"/instrument-traces/js-app",permalink:"/instrument-traces/js-app",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:".Net App",permalink:"/instrument-traces/dotnet-app"},next:{title:"Logs",permalink:"/logs"}},c={},p=[{value:"Auto-instrument sample Javascript app for traces",id:"auto-instrument-sample-javascript-app-for-traces",level:3},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Set up for Javascript application",id:"set-up-for-javascript-application",level:3},{value:"Auto instrumentation setup for Javascript app",id:"auto-instrumentation-setup-for-javascript-app",level:3}];function l(e){const n={a:"a",br:"br",code:"code",h1:"h1",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"javascript-app",children:"Javascript App"}),"\n",(0,s.jsx)(n.h3,{id:"auto-instrument-sample-javascript-app-for-traces",children:"Auto-instrument sample Javascript app for traces"}),"\n",(0,s.jsx)(n.p,{children:"In this tutorial we will go through the steps to auto instrument a Javascript app to send traces to Siglens."}),"\n",(0,s.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Siglens instance should be running on localhost with ingest port-4318. To do so you need to change the ingest port of Siglens to ",(0,s.jsx)(n.code,{children:"4318"})," in ",(0,s.jsx)(n.code,{children:"server.yaml"})]}),"\n",(0,s.jsx)(n.li,{children:"Javascript app (refer the documentation below if you don't have the setup for javascript app)"}),"\n",(0,s.jsxs)(n.li,{children:["To begin with the setup of Javascript app you must have Node.js installed locally. You can download it from ",(0,s.jsx)(n.a,{href:"https://nodejs.org/en/download/",children:"here"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"set-up-for-javascript-application",children:"Set up for Javascript application"}),"\n",(0,s.jsx)(n.p,{children:"Given below are the instructions for setting up a sample Javascript application:"}),"\n",(0,s.jsxs)(n.p,{children:["Note:",(0,s.jsx)(n.br,{}),"\n","To check if node is installed you can run the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"node -v\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Create a new directory and install ",(0,s.jsx)(n.code,{children:"Express"})," and ",(0,s.jsx)(n.code,{children:"Cors"})," within that directory with the command given below:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm i express cors\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now create a file named ",(0,s.jsx)(n.code,{children:"index.js"})," and add the following code to it which gives ",(0,s.jsx)(n.code,{children:"Hello World"})," as output:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'const express = require("express");\nconst cors = require(\'cors\')\nconst PORT = process.env.PORT || "5555";\nconst app = express();\n\napp.use(cors());\napp.use(express.json())\n\napp.all("/", (req, res) => {\n res.json({ method: req.method, message: "Hello World", ...req.body });\n });\n \n app.get(\'/404\', (req, res) => {\n res.sendStatus(404);\n })\n \n app.listen(parseInt(PORT, 10), () => {\n console.log(`Listening for requests on http://localhost:${PORT}`);\n })\n'})}),"\n",(0,s.jsx)(n.p,{children:"Run the application with the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"node index.js\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can access the running app at ",(0,s.jsx)(n.code,{children:"http://localhost:5555/"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"js-app",src:t(4882).Z+"",width:"1088",height:"381"})}),"\n",(0,s.jsx)(n.h3,{id:"auto-instrumentation-setup-for-javascript-app",children:"Auto instrumentation setup for Javascript app"}),"\n",(0,s.jsx)(n.p,{children:"Install the following Opentelemetry dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"npm install --save @opentelemetry/sdk-node\nnpm install --save @opentelemetry/auto-instrumentations-node\nnpm install --save @opentelemetry/exporter-trace-otlp-proto\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"@opentelemetry/sdk-node"})," package provides the full OpenTelemetry SDK for Node.js."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"@opentelemetry/auto-instrumentations-node"})," package installs instrumentation packages that will automatically create spans corresponding to code called in libraries. In this case, it provides instrumentation for Express, letting the example app automatically create spans for each incoming request."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"@opentelemetry/exporter-trace-otlp-proto"})," package allows to transport data via OTLP using the protocol - ",(0,s.jsx)(n.code,{children:"http/protobuf"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Create a file named tracing.js and add the following code to the file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"'use strict'\nconst process = require('process');\nconst opentelemetry = require('@opentelemetry/sdk-node');\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-proto');\nconst { Resource } = require('@opentelemetry/resources');\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\n\nconst init = (serviceName, environment) => {\n\n  const exporterOptions = {\n    url: 'http://localhost:4318/otlp/v1/traces',\n  }\n\n  const traceExporter = new OTLPTraceExporter(exporterOptions);\n  const sdk = new opentelemetry.NodeSDK({\n    traceExporter,\n    instrumentations: [getNodeAutoInstrumentations()],\n    resource: new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: serviceName,\n      [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: environment,\n    })\n  });\n\n  sdk.start()\n\n  process.on('SIGTERM', () => {\n    sdk.shutdown()\n      .then(() => console.log('Tracing terminated'))\n      .catch((error) => console.log('Error terminating tracing', error))\n      .finally(() => process.exit(0));\n  });\n\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now to import this file in ",(0,s.jsx)(n.code,{children:"index.js"})," add the following lines of code to index.js and tracing.js:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# Add the following lines at the start of index.js\n\nconst { init } = require('./tracing')\ninit('demo-node-service', 'development')\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# Add the following lines at the end of tracing.js\n\nmodule.exports = {\n  init: init,\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The default endpoint for sending the traces to SigLens is ",(0,s.jsx)(n.code,{children:"http://localhost:4318/otlp/v1/traces"})," which is set in the code using ",(0,s.jsx)(n.code,{children:"exporterOptions"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Now run the application with the following command:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"node -r ./tracing.js index.js\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"terminal-js",src:t(2629).Z+"",width:"2052",height:"227"})}),"\n",(0,s.jsxs)(n.p,{children:["Now, visit ",(0,s.jsx)(n.code,{children:"http://localhost:5555/"})," and refresh the page a couple of times. Wait for 1-2 minutes, then check the data on SigLens."]}),"\n",(0,s.jsx)(n.p,{children:"You can search traces:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"search-js",src:t(2838).Z+"",width:"2879",height:"1624"})}),"\n",(0,s.jsx)(n.p,{children:"You can view red-metrics:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"metrics-js",src:t(3028).Z+"",width:"2880",height:"1624"})}),"\n",(0,s.jsx)(n.p,{children:"Graph visualization of red-metrics:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"metrics-js-graph-1",src:t(6786).Z+"",width:"2872",height:"1611"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"metrics-js-graph-2",src:t(3958).Z+"",width:"2880",height:"1625"})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},4882:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/js-app-945add642a36916c07e540c4c6b90581.png"},6786:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/js-graph-1-f288f5e30eb0526535fb3e31fb74bf5d.png"},3958:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/js-graph-2-3748ffa10a17a23246ed944e5242a74a.png"},3028:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/metrics-js-4f0e64f655cb552cf282db98bba11106.png"},2838:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/search-traces-js-7fbd4945d3c669297882586b4433dc5f.png"},2629:(e,n,t)=>{t.d(n,{Z:()=>s});const s=t.p+"assets/images/terminal-js-app-6fc1cf91aabd3ed902721687c72c520d.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var s=t(7294);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);