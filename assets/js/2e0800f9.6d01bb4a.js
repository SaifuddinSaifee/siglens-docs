"use strict";(self.webpackChunksiglens_docs=self.webpackChunksiglens_docs||[]).push([[6918],{1022:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var o=s(5893),i=s(1151);const r={},t="Splunk-HEC-Logs",l={id:"log-ingestion/vector/vector-splunk-hec-logs",title:"Splunk-HEC-Logs",description:"- SigLens is compatible with the Splunk-hec-logs plugin for vector. Install vector and start it. Learn more about installation here.",source:"@site/docs/log-ingestion/vector/vector-splunk-hec-logs.md",sourceDirName:"log-ingestion/vector",slug:"/log-ingestion/vector/vector-splunk-hec-logs",permalink:"/siglens-docs/log-ingestion/vector/vector-splunk-hec-logs",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Elasticsearch",permalink:"/siglens-docs/log-ingestion/vector/vector-elasticsearch"},next:{title:"Splunk-HEC-Metrics",permalink:"/siglens-docs/log-ingestion/vector/vector-splunk-hec-metrics"}},c={},a=[{value:"Vector Configuration",id:"vector-configuration",level:2},{value:"Sources",id:"sources",level:3},{value:"Example Sources",id:"example-sources",level:4},{value:"Transforms",id:"transforms",level:3},{value:"Sinks",id:"sinks",level:3},{value:"Example Sink: Splunk HEC Logs",id:"example-sink-splunk-hec-logs",level:4},{value:"Sample Configuration",id:"sample-configuration",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"splunk-hec-logs",children:"Splunk-HEC-Logs"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["SigLens is compatible with the Splunk-hec-logs plugin for vector. Install vector and start it. Learn more about ",(0,o.jsx)(n.a,{href:"./vector-install",children:"installation here"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Make sure that the ",(0,o.jsx)(n.code,{children:"endpoints"})," in the configuration has the ",(0,o.jsx)(n.code,{children:"/splunk"}),"suffix."]}),"\n",(0,o.jsxs)(n.li,{children:["Create a vector config file with the below ",(0,o.jsx)(n.a,{href:"#sample-configuration",children:"sample configuration"}),". Read more about ",(0,o.jsx)(n.a,{href:"#vector-configuration",children:"Vector Config file"})," below."]}),"\n",(0,o.jsxs)(n.li,{children:["Run the command: ",(0,o.jsx)(n.code,{children:"vector --config vector.yaml"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"vector-configuration",children:"Vector Configuration"}),"\n",(0,o.jsxs)(n.p,{children:["For in-depth information on Vector configuration, visit the ",(0,o.jsx)(n.a,{href:"https://vector.dev/docs/reference/configuration/",children:"official Vector documentation"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Vector supports configuration files in ",(0,o.jsx)(n.code,{children:"YAML"}),", ",(0,o.jsx)(n.code,{children:"TOML"}),", and ",(0,o.jsx)(n.code,{children:"JSON"})," formats. Here we provide examples in ",(0,o.jsx)(n.code,{children:"YAML"})]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.h3,{id:"sources",children:"Sources"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"sources"})," component in a Vector configuration specifies where Vector should collect data. This can be from files, servers, services, and other inputs. See the ",(0,o.jsx)(n.a,{href:"https://vector.dev/docs/reference/configuration/sources/",children:"supported source types"})," in Vector documentation."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.h4,{id:"example-sources",children:"Example Sources"}),"\n",(0,o.jsxs)(n.p,{children:["Since the output sink is ",(0,o.jsx)(n.code,{children:"splunk_hec_logs"}),", we can only give the input sources related to logs. Below are some of the examples given in the sample configuration."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"demo_logs"}),": Generates sample logs in a specified format."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"file"}),": Reads and monitors data from a file system."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.h3,{id:"transforms",children:"Transforms"}),"\n",(0,o.jsxs)(n.p,{children:["Transforms allow you to parse and transform data into the desired format. For more details, visit ",(0,o.jsx)(n.a,{href:"https://vector.dev/docs/reference/configuration/transforms/",children:"Vector transforms documentation"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.h3,{id:"sinks",children:"Sinks"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"sinks"})," component defines the destination for data processed by Vector. It's the final stage of the data pipeline."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.h4,{id:"example-sink-splunk-hec-logs",children:"Example Sink: Splunk HEC Logs"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"type"}),": Specifies the sink type, for instance, ",(0,o.jsx)(n.code,{children:"splunk_hec_logs"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"inputs"}),": References the sources or transforms from which the sink should collect data."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"endpoint"}),": The ingestion endpoint for data. For Siglens' Splunk, the default ingestion port is ",(0,o.jsx)(n.code,{children:"8081"}),", with the ingestion route being ",(0,o.jsx)(n.code,{children:"/splunk"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Learn more about Splunk HEC Logs sink configuration in the ",(0,o.jsx)(n.a,{href:"https://vector.dev/docs/reference/configuration/sinks/splunk_hec_logs/",children:"Vector sinks documentation"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"sample-configuration",children:"Sample Configuration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"data_dir: /var/lib/vector\nsources:\n  my_source_id:\n    type: file\n    include:\n      - /mnt/d/Siglens/SplunkExport3.json\n    read_from: beginning\n\n  # The type: \"demo_logs\" will generate syslog logs\n  generate_syslog:\n    type: 'demo_logs'\n    format: 'syslog'\n    count: 2\n\n# Transforms Reference: Transform the data from Sources into desired format\ntransforms:\n  remap_file_log:\n    inputs:\n      - 'my_source_id'\n    type: 'remap'\n    # The path to the file containing the remap rules. Parsing the message which is the data read from the file.\n    # The parsed json is stored in the structured variable. The structured variable is merged with the other data/fields.\n    source: |\n      structured = parse_json!(.message)\n      ., err = merge(., structured)\n\nsinks:\n  siglens:\n    type: splunk_hec_logs\n    inputs:\n      - generate_syslog\n      - remap_file_log\n    endpoint: http://localhost:8081/splunk/\n    host_key: hostname\n    index: 'ind-0'\n    indexed_fields:\n      - index\n    timestamp_key: time\n    compression: none\n    encoding:\n      codec: json\n    default_token: 'A94A8FE5CCB19BA61C4C08'\n    batch:\n      max_events: 1\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>l,a:()=>t});var o=s(7294);const i={},r=o.createContext(i);function t(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);