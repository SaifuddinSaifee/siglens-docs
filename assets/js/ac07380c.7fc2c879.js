"use strict";(self.webpackChunksiglens_docs=self.webpackChunksiglens_docs||[]).push([[434],{9260:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var s=t(5893),i=t(1151);const r={sidebar_position:3},o="Docker",l={id:"installation/docker",title:"Docker",description:"- SigLens can be installed on Linux or macOS machine.",source:"@site/docs/installation/docker.md",sourceDirName:"installation",slug:"/installation/docker",permalink:"/siglens-docs/installation/docker",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Git",permalink:"/siglens-docs/installation/git"},next:{title:"Binary",permalink:"/siglens-docs/installation/binary"}},c={},a=[];function d(e){const n={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"docker",children:"Docker"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"SigLens can be installed on Linux or macOS machine."}),"\n",(0,s.jsx)(n.li,{children:"On macOS, Docker Desktop should be installed before you run the install script."}),"\n",(0,s.jsx)(n.li,{children:"Git clone the SigLens repository and cd into the siglens directory"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"    git clone git@github.com:siglens/siglens.git\n    cd siglens\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Run the install_with_docker.sh script:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"    ./install_with_docker.sh\n"})}),"\n",(0,s.jsx)(n.p,{children:"The SigLens backend is deployed independently of the UI.\nTo allow the UI to connect to the backend a docker network can be used."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'    wget "https://github.com/siglens/siglens/releases/download/${SIGLENS_VERSION}/server.yaml"\n    docker pull siglens/siglens:${SIGLENS_VERSION} \n    mkdir data\n    docker run -it --mount type=bind,source="$(pwd)"/data,target=/siglens/data \\\n        --mount type=bind,source="$(pwd)"/server.yaml,target=/siglens/server.yaml \\\n        -p 8081:8081 -p 80:80 siglens/siglens:${SIGLENS_VERSION}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["To be able to query data across restarts, set ",(0,s.jsx)(n.code,{children:"ssInstanceName"})," in server.yaml."]}),"\n",(0,s.jsxs)(n.p,{children:["The target for the data directory mounting should be the same as the data directory (",(0,s.jsx)(n.code,{children:"dataPath"})," configuration) in server.yaml"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>o});var s=t(7294);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);